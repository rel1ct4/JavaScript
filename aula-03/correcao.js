/**## üîπ Exerc√≠cio 1 - Habilita√ß√£o
**Descri√ß√£o:** Crie um programa que leia o **ano de nascimento** do usu√°rio e o **ano atual**. Com base nesses dados, calcule a **idade** e exiba uma mensagem informando:

- Quantos anos o usu√°rio completa no ano atual
- E se ele **pode ou n√£o tirar a habilita√ß√£o**, considerando que a idade m√≠nima √© 18 anos.

**Exemplo de:**
- Entrada:
    ```css
    Digite o ano de nascimento: 2006
    Digite o ano atual: 2025
    ```

- Sa√≠da:
    ```css
    Voc√™ completa 19 anos em 2025 e poder√° tirar a habilita√ß√£o.
    ```

**Outro exemplo:**
- Entrada:
    ```css
    Digite o ano de nascimento: 2010
    Digite o ano atual: 2025
    ```
 
- Sa√≠da:
    ```css
    Voc√™ completa 15 anos em 2025 e ainda n√£o poder√° tirar a habilita√ß√£o.
    ```

--- */

let idade = 0;
let AnoAtual = 0;
let DataNascimento = 0;

alert(`Atividade 1`)

AnoAtual = Number(prompt("Qual o ano atual?"))
DataNascimento = Number(prompt("Qual a sua data de nascimento?"))

idade = AnoAtual - DataNascimento

if(idade >= 18){
    alert(`Voc√™ pode tirar habilita√ß√£o j√° que esse ano possui ${idade} anos!`)

}else{
    alert(`Voc√™ n√£o pode tirar a habilita√ß√£o j√° que durante esse ano voc√™ tem ${idade} anos!`)
}

/**## üîπ Exerc√≠cio 2 - Faixa Et√°ria
**Descri√ß√£o:** Crie um programa que solicite ao usu√°rio sua **idade** e, com base na idade fornecida, imprima uma mensagem indicando a faixa et√°ria correspondente:

- Idade **maior ou igual** a 65: `Voc√™ √© um idoso.`
* Idade **maior ou igual** a 18: `Voc√™ √© um adulto.`
- Idade **maior ou igual** a 13: `Voc√™ √© um adolescente.`
* **Sen√£o** a sa√≠da deve ser: `Voc√™ √© uma crian√ßa.`

**Exemplo de:**
- Entrada:
    ```yaml
    Qual a sua idade ? 30
    ```

- Sa√≠da:
    ```css
    Voc√™ √© um adulto. 
    ```

--- */

let idadee = 0;

alert(`Atividade 2`)

idadee = Number(prompt(`Qual a sua idade?`))

if(idadee > 65){
    alert(`Voc√™ √© idoso!`)

}else if(idadee < 65 && idadee >= 18){
    alert(`Voc√™ √© um adulto!`)

}else if( idadee < 18 && idadee > 13){
     alert(`Voc√™ √© um adolescente!`)

}else if(idadee < 13 && idadee > 0){
    alert(`Voc√™ √© uma crian√ßa!`)

}else{
    alert(`N√∫mero inv√°lido`)
}

/**## üîπ Exerc√≠cio 3 - Classifica√ß√£o de IMC
**Descri√ß√£o:** Crie um programa que solicite ao usu√°rio o seu **peso** (em kg) e sua **altura** (em metros). Em seguida, o programa deve calcular o IMC do usu√°rio utilizando a f√≥rmula:

```ini
IMC = peso / (altura * altura)
```

Ap√≥s o c√°lculo, exiba o **valor do IMC** e, de acordo com o valor obtido, informe a **classifica√ß√£o** do IMC:

- **Abaixo de 18.5**: `Abaixo do peso`
- **Entre 18.5 e 24.9**: `Peso normal`
- **Entre 25 e 29.9**: `Sobrepeso`
- **Entre 30 e 34.9**: `Obesidade grau 1`
- **Entre 35 e 39.9**: `Obesidade grau 2`
- **Acima de 40**: `Obesidade grau 3`

**Exemplo de:**
- Entrada:
    ```css
        Peso (kg): 70
        Altura (m): 1.75
    ```

- Sa√≠da:
    ```yaml
    Seu IMC √©: 22.86
    Voc√™ tem peso normal.
    ```

--- */

let imc = Number;
let altura = Number;
let peso = Number;

alert(`Atividade 3`)

altura = prompt(`Qual a sua altura?`)
peso = prompt(`Qual o seu peso?`)

imc = peso / (altura * altura)

if(imc < 18.5){
    alert(`Seu imc √© ${imc}, Voc√™ est√° abaixo do peso!`)

}else if(imc >= 18.5 && imc < 24.9){
    alert(`Seu imc √© ${imc}, Peso normal`)

}else if(imc >= 24.9 && imc < 29.9){
    alert(`Seu imc √© ${imc}, Sobrepeso`)
}else if(imc >= 29.9 && imc < 34.9){
    alert(`Seu imc √© ${imc}, Obesidade grau 1`)

}else if(imc >= 34.9 && imc < 39.9){
    alert(`Seu imc √© ${imc}, Obesidade grau 2`)
    
}else{
    alert(`Seu imc √© ${imc}, Obesidade grau 3`)
}

/**## üîπ Exerc√≠cio 4 - Calculadora Simples 1
**Descri√ß√£o:** Escreva um programa que simule uma calculadora simples. O programa deve ler dois n√∫meros inteiros e o tipo de opera√ß√£o a ser realizada (soma, subtra√ß√£o, multiplica√ß√£o ou divis√£o). A opera√ß√£o ser√° escolhida pelo usu√°rio, utilizando um n√∫mero que representar√° cada opera√ß√£o:

- **1** para soma
- **2** para subtra√ß√£o
- **3** para multiplica√ß√£o
- **4** para divis√£o

Use o comando `switch` para escolher a opera√ß√£o e, ao final, exiba o resultado da opera√ß√£o escolhida.

**Exemplo de:**
- Entrada:
    ```css
    Digite o primeiro n√∫mero: 10
    Digite o segundo n√∫mero: 5

    --- Opera√ß√µes ---
    1 - soma 
    2 - subtra√ß√£o 
    3 - multiplica√ß√£o
    4 - divis√£o
    -----------------

    Escolha uma opera√ß√£o: 1
    ```

- Sa√≠da:
    ```yaml
    Resultado da soma: 15
    ```

--- */

let primeiro, segundo, opcao, operacao

alert(`Atividade 4`)

primeiro = Number(prompt(`Digite seu primeiro n√∫mero!`))
segundo = Number(prompt(`Digite seu egundo n√∫mero!`))

alert(`--- Opera√ß√µes ---
    1 - soma 
    2 - subtra√ß√£o 
    3 - multiplica√ß√£o
    4 - divis√£o
    -----------------
`)

opcao = Number(prompt(`Escolha sua op√ß√£o!`))

switch (opcao) {
    case 1:
        alert(`Resultado da soma: ${primeiro + segundo}`)
        break;

    case 2:
        alert(`Resultado da subtra√ß√£o: ${primerio - segundo}`)
        break;

    case 3:
        alert(`Resultado da multiplica√ß√£o: ${primerio * segundo}`)
        break;

    case 4:
        alert(`Resultado da divis√£o: ${primeiro / segundo}`)
        break;
}

/**## üîπ Exerc√≠cio 5 - Imprimindo Intervalo
**Descri√ß√£o:** Crie um programa  que leia dois n√∫meros inteiros: **um valor inicial** e **um valor final**. O programa deve ent√£o imprimir todos os n√∫meros do valor inicial at√© o valor final, **inclusive**.

**Exemplo de:**
- Entrada:
    ```css
        Valor inicial: 5
        Valor final: 10
    ```

- Sa√≠da:
    ```yaml
        5 6 7 8 9 10
    ```

--- */

alert(`Atividade 5`)

let inicial = Number(prompt(`Digite um valor inicial!`))
let final = Number(prompt(`Digite um valo final`))

do {
    alert(`${inicial}`)
    inicial++
} while (inicial != final + 1);

/**## üîπ Exerc√≠cio 6 - Soma dos Pares
**Descri√ß√£o:** Crie um programa que leia um n√∫mero inteiro N e calcule a **soma de todos os n√∫meros pares de 1 at√© N**. O programa deve utilizar um la√ßo de repeti√ß√£o para percorrer os n√∫meros de 1 at√© N, somando apenas os n√∫meros pares.

**Exemplo de:** 
- Entrada:
    ```css
    N: 10
    ```

- Sa√≠da:
    ```css
    A soma dos n√∫meros pares de 1 at√© 10 √©: 30
    ```

--- */

let numero 

alert(`Atividade 6`)

numero = Number(prompt(`Digite um n√∫mero!`))

let resultado = 0

for (let i = 0; i < numero; i++) {

    if(i % 2 === 0){
        resultado += i
        console.log(resultado)
    
    }
    console.log(i)
}


alert(`A soma dos n√∫meros de 1 at√© ${numero} √© ${resultado}`)

/**üîπ Exerc√≠cio 7 - Positivos e Negativos
**Descri√ß√£o:** Crie um programa que leia n√∫meros inteiros da entrada at√© que o n√∫mero digitado seja **0**. Para cada n√∫mero, o programa deve verificar se ele √© **positivo** ou **negativo**. Ao final, o programa deve informar a quantidade de n√∫meros positivos e a quantidade de n√∫meros negativos digitados.

**Exemplo de:** 
- Entrada:
    ```css
        3
        -2
        5
        -1
        0
    ```

- Sa√≠da:
    ```yaml
        Quantidade de n√∫meros positivos: 3
        Quantidade de n√∫meros negativos: 2
    ```

---
 */

let numeroo, positivo = 0 , negativo = 0

alert(`Atividade 7`)

do {
   numeroo = Number(prompt(`Digite um n√∫mero!`))

   if (numeroo > 0) {
        positivo ++

   } else if(numeroo < 0) {
        negativo ++

   }else{
    alert(`Quantidade de n√∫meros positivos: ${positivo}
        Quantidade de n√∫meros negativos: ${negativo}`)
   }
    
} while (numeroo != 0);

/**üîπ Exerc√≠cio 8 - Digite a Senha
**Descri√ß√£o:** Crie um programa que solicite **uma senha ao usu√°rio** e continue pedindo at√© que ele digite a senha correta. A senha correta deve estar definida no pr√≥prio programa. Ao acertar, exiba uma mensagem de acesso liberado.
Use o la√ßo `do-while` para garantir que o programa solicite a senha pelo menos uma vez.

**Exemplo de:**
- Entrada:
    ```css
    Digite a senha: 0000
    Digite a senha: 4321
    Digite a senha: 1234
    ```
 
* Sa√≠da:
    ```css
    Senha incorreta. Tente novamente.
    Senha incorreta. Tente novamente.
    Acesso liberado.
    ``` */

    let senha = 0

    alert(`Atividade 8`)

    do {
        senha = Number(prompt(`Digite a senha!`))

        if (senha != 1234) {
            alert(`Senha incorreta!`)
            alert(`Tente novamente!`)
        } else {
            alert(`Acesso liberado!`)
        }

    } while (senha != 1234);